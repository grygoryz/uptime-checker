definitions:
  auth.CheckResponse:
    properties:
      email:
        type: string
      id:
        type: integer
    required:
    - email
    - id
    type: object
  auth.SignInBody:
    properties:
      email:
        maxLength: 320
        type: string
      password:
        maxLength: 128
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  auth.SignUpBody:
    properties:
      email:
        maxLength: 320
        type: string
      password:
        maxLength: 128
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  channel.CreateChannelBody:
    properties:
      email:
        type: string
      kind:
        allOf:
        - $ref: '#/definitions/entity.ChannelKind'
        enum:
        - email
        - webhook
      webhookURL:
        type: string
    required:
    - kind
    type: object
  channel.CreateChannelResponse:
    properties:
      id:
        type: integer
    required:
    - id
    type: object
  channel.GetChannelsResponseItem:
    properties:
      email:
        type: string
      id:
        type: integer
      kind:
        $ref: '#/definitions/entity.ChannelKind'
      webhookURL:
        type: string
    required:
    - id
    - kind
    type: object
  channel.UpdateChannelBody:
    properties:
      email:
        type: string
      kind:
        allOf:
        - $ref: '#/definitions/entity.ChannelKind'
        enum:
        - email
        - webhook
      webhookURL:
        type: string
    required:
    - kind
    type: object
  entity.ChannelKind:
    enum:
    - email
    - webhook
    type: string
    x-enum-varnames:
    - EmailChannel
    - WebhookChannel
info:
  contact: {}
  title: Uptime Checker
  version: 0.0.1
paths:
  /v1/auth/check:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.CheckResponse'
      security:
      - cookieAuth: []
      summary: Check user data
      tags:
      - Auth
  /v1/auth/signin:
    put:
      consumes:
      - application/json
      description: Sets cookie "sessionId" on response
      parameters:
      - description: user credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/auth.SignInBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Sign in
      tags:
      - Auth
  /v1/auth/signout:
    put:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - cookieAuth: []
      summary: Sign out
      tags:
      - Auth
  /v1/auth/signup:
    put:
      consumes:
      - application/json
      parameters:
      - description: user data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/auth.SignUpBody'
      produces:
      - application/json
      responses:
        "201":
          description: Created
      summary: Sign up
      tags:
      - Auth
  /v1/channels:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/channel.GetChannelsResponseItem'
            type: array
      security:
      - cookieAuth: []
      summary: Get channels
      tags:
      - Channels
    post:
      consumes:
      - application/json
      parameters:
      - description: channel data
        in: body
        name: channel
        required: true
        schema:
          $ref: '#/definitions/channel.CreateChannelBody'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/channel.CreateChannelResponse'
      security:
      - cookieAuth: []
      summary: Create channel
      tags:
      - Channels
  /v1/channels/{id}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: channel id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - cookieAuth: []
      summary: Delete channel
      tags:
      - Channels
    put:
      consumes:
      - application/json
      parameters:
      - description: channel id
        in: path
        name: id
        required: true
        type: integer
      - description: channel data
        in: body
        name: channel
        required: true
        schema:
          $ref: '#/definitions/channel.UpdateChannelBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - cookieAuth: []
      summary: Update channel
      tags:
      - Channels
securityDefinitions:
  cookieAuth:
    in: cookie
    name: sessionId
    type: apiKey
swagger: "2.0"
